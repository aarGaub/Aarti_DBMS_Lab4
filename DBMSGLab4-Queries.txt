
create database ecommerce;
use ecommerce;

1,2)-------------------------CREATE TABLES----------------------------------

create table supplier(SUPP_ID int primary key, SUPP_NAME varchar(50) NOT NULL, SUPP_CITY varchar(50) NOT NULL, SUPP_PHONE varchar(50) NOT NULL);
create table customer(CUS_ID int primary key, CUS_NAME varchar(20) NOT NULL, CUS_CITY varchar(30) NOT NULL, CUS_PHONE varchar(10) NOT NULL, CUS_GENDER char);
create table category(CAT_ID int primary key, CAT_NAME varchar(20) NOT NULL);
create table product(PRO_ID int primary key, PRO_NAME varchar(20) NOT NULL DEFAULT "Dummy", PRO_DESC varchar(60), CAT_ID int, foreign key (CAT_ID) references category(CAT_ID));
create table supplier_pricing(PRICING_ID int primary key, PRO_ID int, SUPP_ID int, SUPP_PRICE int DEFAULT 0, foreign key (PRO_ID) references product(PRO_ID), foreign key (SUPP_ID) references supplier(SUPP_ID));
create table orders(ORD_ID int primary key, ORD_AMOUNT int NOT NULL, ORD_DATE date NOT NULL, CUS_ID int, PRICING_ID int,foreign key(CUS_ID) references customer(CUS_ID), foreign key(PRICING_ID) references supplier_pricing(PRICING_ID));
create table rating(RAT_ID int primary key, ORD_ID int,RAT_RATSTARS int NOT NULL, foreign key(ORD_ID) references orders(ORD_ID));


3)--------------------INSERT DATA----------------------------------

insert into supplier values(1,"Rajesh Retails","Delhi","1234567890");
insert into supplier values(2,"Appario Ltd.",	"Mumbai","2589631470");
insert into supplier values(3	,"Knome products","Banglore","9785462315");
insert into supplier values(4,"Bansal Retails","Kochi","8975463285");
insert into supplier values(5,"Mittal Ltd.","Lucknow","7898456532");


insert into customer values(1,"AAKASH","DELHI","9999999999",'M');
insert into customer values(2,"AMAN",	"NOIDA","9785463215",'M');
insert into customer values(3	,"NEHA","MUMBAI","9999999999", 'F');
insert into customer values(4,"MEGHA","KOLKATA","9994562399",'F');
insert into customer values(5,"PULKIT","LUCKNOW","7895999999",'M');

insert into category values(1,"BOOKS");
insert into category values(2,"GAMES");
insert into category values(3,"GROCERIES");
insert into category values(4,"ELECRONICS");
insert into category values(5,"CLOTHES");

insert into product values(1,"GTA V","Windows 7 and above with i5 processor and 8GB RAM",2);
insert into product values(2,"TSHIRT",	"SIZE-L with Black, Blue and White variations",5);
insert into product values(3,"ROG LAPTOP","Windows 10 with 15inch screen, i7 processor, 1TB SSD",4);
insert into product values(4,"OATS","Highly Nutritious from Nestle",3);
insert into product values(5,"HARRY POTTER","Best Collection of all time by J.K Rowling",1);
insert into product values(6,"MILK","1L Toned MIlk",3);
insert into product values(7,"Boat Earphones","1.5Meter long Dolby Atmos",4);
insert into product values(8,"Jeans","Stretchable Denim Jeans with various sizes and color",5);
insert into product values(9,"Project IGI","compatible with windows 7 and above",2);
insert into product values(10,"Hoodie","Black GUCCI for 13 yrs and above",5);
insert into product values(11,"Rich Dad Poor Dad","Written by RObert Kiyosaki",1);
insert into product values(12,"Train Your Brain","By Shireen Stephen",1);


insert into supplier_pricing values(1,1,2,1500);
insert into supplier_pricing values(2,3,5,30000);
insert into supplier_pricing values(3,5,1,3000);
insert into supplier_pricing values(4,2,3,2500);
insert into supplier_pricing values(5,4,1,1000);
insert into supplier_pricing values(6,12,2,780);
insert into supplier_pricing values(7,12,4,789);
insert into supplier_pricing values(8,3,1,31000);
insert into supplier_pricing values(9,1,5,1450);
insert into supplier_pricing values(10,4,2,999);
insert into supplier_pricing values(11,7,3,549);
insert into supplier_pricing values(12,7,4,529);
insert into supplier_pricing values(13,6,2,105);
insert into supplier_pricing values(14,6,1,99);
insert into supplier_pricing values(15,2,5,2999);
insert into supplier_pricing values(16,5,2,2999);


insert into orders values(101,1500,"2021-10-06", 2 ,1);
insert into orders values(102,1000,"2021-10-12", 3 ,5);
insert into orders values(103,30000,"2021-09-16", 5 ,2);
insert into orders values(104,1500,"2021-10-05", 1 ,1);
insert into orders values(105,3000,"2021-08-16", 4 ,3);

rename table `orders` to `order`;

INSERT INTO `order` VALUES(106,1450,"2021-08-18",1,9);
INSERT INTO `order` VALUES(107,789,"2021-09-01",3,7);
INSERT INTO `order` VALUES(108,780,"2021-09-07",5,6);
INSERT INTO `order` VALUES(109,3000,"2021-09-10",5,3);
INSERT INTO `order` VALUES(110,2500,"2021-09-10",2,4);
INSERT INTO `order` VALUES(111,1000,"2021-09-15",4,5);
INSERT INTO `order` VALUES(112,789,"2021-09-16",4,7);
INSERT INTO `order` VALUES(113,31000,"2021-09-16",1,8);
INSERT INTO `order` VALUES(114,1000,"2021-09-16",3,5);
INSERT INTO `order` VALUES(115,3000,"2021-09-16",5,3);
INSERT INTO `order` VALUES(116,99,"2021-09-17",2,14);

insert into rating values(1,101,4);
insert into rating values(2,102,3);
insert into rating values(3,103,1);
insert into rating values(4,104,2);
insert into rating values(5,105,4);
insert into rating values(6,106,3);
insert into rating values(7,107,4);
insert into rating values(8,108,4);
insert into rating values(9,109,3);
insert into rating values(10,110,5);
insert into rating values(11,111,3);
insert into rating values(12,112,4);
insert into rating values(13,113,2);
insert into rating values(14,114,1);
insert into rating values(15,115,1);
insert into rating values(16,116,0);

4) Display the total number of customers based on gender who have placed orders of worth at least Rs.3000.

select count(distinct o.CUS_ID) as no_Of_Customers, c.CUS_GENDER  from customer c inner join `order` o on c.CUS_ID=o.CUS_ID where o.ORD_AMOUNT>=3000
 group by c.CUS_GENDER;

5) Display all the orders along with product name ordered by a customer having Customer_Id=2.

select A.*, p.PRO_NAME from product p inner join 
(select o.ORD_ID, o.ORD_AMOUNT,o.ORD_DATE, o.PRICING_ID, o.CUS_ID, sp.PRO_ID from `order` o inner join supplier_pricing sp 
on o.PRICING_ID=sp.PRICING_ID where CUS_ID=2) as A
on p.PRO_ID=A.PRO_ID ;

6)Display the Supplier details who can supply more than one product.

select s.*,A.* from
(select sp.SUPP_ID, count(sp.PRO_ID) as no_of_products from supplier_pricing sp group by sp.SUPP_ID having count(sp.PRO_ID)>1 ) 
as A inner join Supplier s on s.SUPP_ID=A.SUPP_ID;

7)Find the least expensive product from each category and print the table with category id, name, product name and price of the product.

select k.cat_id, k.cat_name, product.pro_name,
k.minPrice from (select MIN(SUPP_PRICE) as minPrice, category.cat_name, category.cat_id from product 
join supplier_pricing on supplier_pricing.pro_id = product.pro_id
join category on category.cat_id = product.cat_id GROUP BY category.cat_id) k
join product on k.cat_id = product.cat_id 
join supplier_pricing on supplier_pricing.pro_id = product.pro_id 
where k.minPrice = supplier_pricing.supp_price;



8)Display the Id and Name of the Product ordered after “2021-10-05”.

select p.pro_id, p.pro_name, o.ord_date from `order` o
 inner join supplier_pricing sp on sp.pricing_id = o.pricing_id
 inner join product p on p.pro_id = sp.pro_id
 where ord_date > '2021-10-05'
 
9)Display customer name and gender whose names start or end with character 'A'. 

select * from customer c where c.CUS_NAME like 'A%' or c.CUS_NAME like '%A';

10)Create a stored procedure to display supplier id, name, Rating(Average rating of all the products sold by every customer) and Type_of_Service. For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print “Average
Service” else print “Poor Service”. Note that there should be one rating per supplier


CREATE DEFINER=`root`@`localhost` PROCEDURE `rating_proc`()
BEGIN
select report.SUPP_ID,report.SUPP_NAME,report.Average,
CASE
	WHEN report.Average =5 THEN 'Excellent Service'
    	WHEN report.Average >4 THEN 'Good Service'
    	WHEN report.Average >2 THEN 'Average Service'
    	ELSE 'Poor Service'
END AS Type_of_Service from 
(select final.SUPP_ID, supplier.SUPP_NAME, final.Average from
(select test2.SUPP_ID, sum(test2.RAT_RATSTARS)/count(test2.RAT_RATSTARS) as Average from
(select supplier_pricing.SUPP_ID, test.ORD_ID, test.RAT_RATSTARS from supplier_pricing inner join
(select `order`.PRICING_ID, rating.ORD_ID, rating.RAT_RATSTARS from `order` inner join rating on rating.ORD_ID = `order`.ORD_ID ) as test
on test.PRICING_ID = supplier_pricing.PRICING_ID) 
as test2 group by test2.SUPP_ID) 
as final inner join supplier where final.SUPP_ID = supplier.SUPP_ID) as report;

END

------------
call rating_proc();